@page "/blazorjs"
@inject IJSRuntime JsRuntime
@using RoyalVilla_server.Helper

<h3>Blazor JS</h3>
<div class="row">
    <div class="col-4">
        <button class="btn btn-secondary" @onclick="(()=>TestConfirmBox(ConfirmMessage))">Test Confirm Button</button>
    </div>
    <div class="col-4">
        <button class="btn btn-success" @onclick="TestSuccess">Test Toastr Success</button>
        <button class="btn btn-danger" @onclick="TestFailure">Test Toastr Failure</button>
    </div>
    <div class="row mt-4">
        <div class="col-4">
            <button class="btn btn-success" @onclick="TestSuccessSwal">Test Swal Success</button>
            <button class="btn btn-danger" @onclick="TestFailureSwal">Test Swal Failure</button>
        </div>
    </div>

</div>
<div class="row">

    @if (ConfirmResult)
    {
        <br>
        <b>
            <p>Confirmation has been done</p>
        </b>
    }
    else
    {
        <p>Confirmation has been pending</p>
    }
</div>
@code {
    private string ConfirmMessage = "Are you sure you want to click?";
    private bool ConfirmResult { get; set; }
    private async Task TestConfirmBox(string message)
    {
        ConfirmResult = await JsRuntime.InvokeAsync<bool>("confirm", message);
    }
    private async Task TestSuccess()
    {
        await JsRuntime.ToastrSucess("Sucess Message");
    }
    private async Task TestFailure()
    {
        await JsRuntime.ToastrError("Sucess Message");
    }
    private async Task TestSuccessSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal", "success", "Task completed successfully!");
    }
    private async Task TestFailureSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal", "error", "Task failed!");
    }
}
