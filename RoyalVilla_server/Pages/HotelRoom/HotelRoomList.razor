@page "/hotel-room"
@using Models;
@using Business.Repository.IRepository;
@using RoyalVilla_server.Service;
@inject IHotelRoomRepository HotelRoomRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService toastService
@inject RoyalVilla_server.Service.IService.IFileUpload FileUpload

@attribute [Authorize(Roles =Common.SD.Role_Admin)]

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Room's</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info text-light form-control"><b>Add New Room</b></NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>Sqft</th>
                    <th>
                        Action
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (HotelRooms.Any())
                {
                    foreach (var room in HotelRooms)
                    {
                        <tr>
                            <td>@room.Name</td>
                            <td>@room.Occupancy</td>
                            <td>@room.RegularRate.ToString("c")</td>
                            <td>@room.SqFt</td>
                            <td>
                                <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(room.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No Record Found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<DeleteConfirmation IsParentComponentProcessing="IsProcessing" CofirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
    private IEnumerable<HotelRoomDTO> HotelRooms { get; set; } = new List<HotelRoomDTO>();
    private int? DeleteRoomId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        HotelRooms = await HotelRoomRepository.GetAllHotelRoom();
    }

    public async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfimationModal");

    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteRoomId != null)
        {
            HotelRoomDTO hotelRoom = await HotelRoomRepository.GetHotelRoom(DeleteRoomId.Value);
            foreach (var image in hotelRoom.HotelRoomImages)
            {
                var imageName = image.RoomImageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
                FileUpload.DeleteFile(imageName);
            }

            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            HotelRooms = await HotelRoomRepository.GetAllHotelRoom(); 
            await JsRuntime.ToastSuccess("Hotel room Delete successfully.");

        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }
}